1、CSS概述
	1、CSS 与 HTML 之间的关系
		<p align="center"></p>
		css:
		p{
			align:center;/*错误*/
		}
2、CSS语法
	1、CSS的使用方式
		1、内联方式
			<ANY style="样式声明;">
			样式声明的组成 ： 样式属性:值;
		2、内部样式表
			<style>
				样式规则

				选择器{
					样式声明;
				}
			</style>
		3、外部样式表
			1、创建独立的 css 文件，并编写样式
				编写 样式规则
			2、在使用的页面中进行引入(链接)
				<link rel="stylesheet" href=" url " />
	2、选择器
		1、通用选择器 
			*{}
		2、元素选择器
			html{}
		3、类选择器
			.类名{}
			多类选择器的引用方式
			<ANY class="class1 class2 class3">
			分类选择器的定义方式
			元素选择器.类选择器{}
		4、ID选择器
			专属定制
			#ID{}
		5、群组选择器
			选择器1,选择器2,选择器3,...{}
		6、后代选择器
			后代：无限子级
			选择器1 选择器2{}
		7、子代选择器
			子代：一级层级 (下一级)
			选择器1>选择器2{}
		8、伪类选择器
			1、链接伪类
				:link
				:visited
			2、动态伪类
				:hover (重点)
				:active 
				:focus
3、尺寸属性 
	1、尺寸
		1、宽度
			width
			max-width
			min-width
		2、高度
			height
			max-height
			min-height
		3、允许设置尺寸属性的元素
			1、块级元素
			2、行内块
				表单元素(radio,checkbox除外)
			3、具备 width 和 height html属性的元素
				<img>
				<table>
		4、溢出
			空间已经包含不下所有的内容
			属性：
				overflow
				overflow-x
				overflow-y
			取值
				1、visible : 默认值，可见
				2、hidden : 隐藏
				3、scroll
				4、auto
===================================
img : display:inline;(行内)
p: display:block;(块级)
div: display:block;(块级)
table : ?
ul : ?
li : ?
===================================
1、边框属性
	1、边框
		1、简写方式
			border:width style color;
				width:边框的宽度，以px为单位的数值
				style:边框的样式
					solid : 实线
					dotted : 虚线(点状)
					dashed : 虚线(线状)
				color:边框的颜色，合法颜色值
					特殊：transparent , 透明
			ex:
				border:1px solid #000;
				border:0; 或 border:none;
		2、单边定义
			只定义某一方向的边框的 粗细，样式，颜色
			border-方向:width style color;
			方向：top/right/bottom/left
			ex:
				border-top:1px solid red;
		3、单属性定义
			定义四个边框的某一个属性值
			border-属性:值;
			属性：width/style/color
			ex:
				border-color:#e4393c;
		4、单边单属性定义
			定义某一方向的具体某一属性值
			border-方向-属性:值;
				方向：top/right/bottom/left
				属性：width/style/color
			ex:
				1、下边框的颜色为 #ddd
					border-bottom-color:#ddd;
				2、右边框的样式为 dotted
					border-right-style:dotted;
		5、边框的组成
			是由四个等边三角形组成的
	2、边框倒角
		将 元素的 四个直角 倒换成 圆角
		语法：
			属性：border-radius
			取值：
				1、具体数值
				2、百分比
					采用当前元素 宽度 和 高度的占比 来作为倒角圆的半径
		单角定义:
			border-top-left-radius:左上角倒角半径值;
			border-top-right-raius:右上角...
			border-bottom-left-radius:
			border-bottom-right-radius:
	3、边框阴影
		语法：
			属性：box-shadow
			取值：
				取值为多个值的列表
				h-shadow v-shadow blur spread color inset;
				h-shadow:必须的，阴影的水平偏移距离
					取值为正，阴影右偏移
					取值为负，阴影左偏移
				v-shadow:必须的，阴影的垂直偏移距离
					取值为正，阴影下偏移
					取值为负，阴影上偏移
				blur:模糊距离
				spread:阴影大小
				color:颜色
				inset:将默认的外阴影改为内阴影
	4、边框轮廓
		1、什么是轮廓
			是绘制与元素周围的一条线，位于边框之外，起到突出显示的作用
		2、语法
			outline:width style color;
			outline-width:轮廓的宽度
			outline-style:
			outline-color:

			outline:none; 或 outline:0;
2、框模型
	1、框模型
		框：Box，泛指页面中所有的元素
			页面元素皆为框
		框模型：Box Model，定义了元素框处理元素内容(尺寸)，内边距，外边距，以及边框的方式

		外边距：元素(框) 与 元素(框)之间的距离
		内边距：元素(框) 与 内容之间的距离

		元素的占地尺寸
			元素总宽度=左右外边距 + 左右边框 + 左右内边距 + width;
			元素总高度=上下外边距 + 上下边框 + 上下内边距 + height;
		元素的可视化尺寸(边框内)
			边框内宽度=左右边框+左右内边距+width;
			边框内高度=上下边框+上下内边距+height;
	2、外边距
		1、什么是外边距
			元素边框(边缘)之外的距离
		2、语法
			属性：
				margin:值;
				margin-top/right/bottom/left:值;
			取值：
				1、具体数值 px
				2、百分比 %
				3、auto
					默认情况下，可以自动计算左右外边距
					实现 块级元素 水平居中对齐
					注意：必须为元素设置宽度才能居中
				4、负数
					向相反的方向移动元素
					margin-top
						取值为正，元素下移动
						取值为负，元素上移动
					margin-left
						取值为正，元素右移动
						取值为负，元素左移动
			简写方式：
				margin:value; 四个方向外边距值
					ex
						margin:10px;
				margin:v1 v2; v1:上下 , v2:左右
					ex
						margin:0 auto;
				margin:v1 v2 v3;v1:上 v2:左右 v3:下
					ex
						margin:0 auto 15px;
				margin:v1 v2 v3 v4;上 右 下 左
		3、页面中具备默认外边距的元素
			在页面中，通过 CSS Reset(CSS重写)的方式将默认的外边距全部都清除
			body,h1,h2,h3,h4,h5,h6,p,ul,ol,dl,dd,pre{
				margin:0;
			}
		4、特殊问题
			1、外边距的合并
				当两个垂直外边距相遇时，他们将形成一个外边距，合并后的外边距值等于两个元素外边距中较大的数值

			2、外边距的溢出
				在某些特殊的情况下，为子元素设置上外边距时，有可能会作用到父元素上
					条件：
						1、父元素没有上边框
						2、必须为第一个子元素设置上外边距
					解决方案：
						1、给父元素加上边框
							弊端：父元素高度会发生变化
						2、通过给父元素增加上内边距取代子元素上外边距
							弊端：改变父元素高度
						3、在父元素中增加一个空table
							弊端：多了一个空元素
						4、... ...
							后续完成...
			
			3、为行内元素 和 行内块元素 设置 上下外边距
				行内元素：上下外边距无效(img除外)
				行内块元素：设置上下外边距时，整行元素都跟着动
	3、内边距
		1、什么是内边距
			元素的边框(边缘) 到 内容之间的距离
			注意：内边距会扩大元素边框所占用的区域
		2、语法
			属性：
				padding
				padding-top/right/bottom/left
			取值：
				1、px
				2、%
				3、auto
			简写
				padding:v1; 四个方向内边距
				padding:v1 v2;上下  左右
				padding:v1 v2 v3;上  左右  下
				padding:v1 v2 v3 v4; 上 右 下 左
		3、特殊效果
			为行内元素 和 行内块元素 增加上下内边距时有特殊效果
			特殊效果：只会影响自己，并不会影响其他元素
	4、box-sizing
		作用：指定 框模型的 计算方式
		div{
			width:471px;
			border-left:2px solid #ddd;
			border-right:6px solid #fff;
			padding-left:18px;
			padding-right:3px;
		}
		Element Width = 471 + 2 + 6 +18 + 3;
		属性：box-sizing
		取值：
			1、content-box
				元素的width属性值，不包含padding和border
				Element Width = width + padding-left/right + border-left/right;
			2、border-box
				元素的width属性值，会包含padding 以及 border
				Element Width = width;
3、背景属性
	1、背景颜色
		属性：background-color
		取值：合法颜色值 或 transparent
		注意：背景颜色会填充到边框，内边距以及内容区域
	2、背景图片
		属性：background-image
		取值：url("图片url")

		背景图 与 <img> 有什么区别？
		 <img>是独立的元素
		 背景图：不是元素，是某元素背景的衬托
	3、背景重复(平铺)
		当元素区域大于背景图的话，默认是以平铺的方式出现
		属性：background-repeat
		取值：
			1、repeat
				默认值，水平和垂直方向都平铺
			2、repeat-x
				只在水平方向平铺
			3、repeat-y
				只在垂直方向平铺
			4、no-repeat
				不平铺
	4、背景图片尺寸
		属性：background-size
		取值：
			1、width height 
			2、width% height%
			3、cover
				覆盖，将背景图等比扩大，直到背景图覆盖到元素所有区域为止
			4、contain
				包含，将背景图等比扩大，直到背景图的一个边缘碰到元素右边或下边为止
	5、背景图片固定
		作用：让背景图一直保持在可视化区域中，不随着滚动条而发生改变
		属性：background-attachment
		取值：
			1、scroll
				默认值，滚动
			2、fixed
				固定
		注意：尽量为 body 设置背景
	6、背景定位/位置
		属性：background-position
		取值：
			1、x y
				x ：背景图横向偏移距离 
					x 取值为正，背景图，向右偏移
					x 取值为负，背景图，向左偏移
				y ：背景图纵向偏移距离
					y 取值为正，背景图，向下偏移
					y 取值为负，背景图，向上偏移
			2、x% y%
				0% 0% : 左上角
				100% 100% : 右下角
				50% 50% : 正中间
			3、关键字
				x : left / center / right 取代
				y : top / center / bottom 取代
			
			CSS Sprites
				雪碧图，精灵图
				将若干幅小图像封装到一幅大图像中，以便减少http请求次数
			实现步骤：
				1、在页面中，根据要看的图像的尺寸，创建一个一模一样大小的元素
				2、为该元素设置背景图，并且通过 背景图像定位 将要显示的图移动到 元素区域内
				
	7、背景属性(简写)
		background:color url() repeat attachment position;
		ex:
			background:#f00;
			background:url(iconlist_1.png) -243px -112px;







